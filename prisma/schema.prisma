// Prisma schema file for storing data models
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InfractionType {
  Warn
  Mute
  Kick
  Ban
  Unmute
  Unban
}

model Guilds {
  id String @id

  // Command configurations

  msgCmdsPrefix              String   @default(">")
  msgCmdsAutoDelete          Boolean  @default(true)
  msgCmdsRespondIfNoPerms    Boolean  @default(true)
  msgCmdsRespondIfNotAllowed Boolean  @default(true)
  msgCmdsRespondIfDisabled   Boolean  @default(true)
  msgCmdsDisabledList        String[]
  msgCmdsPreserveErrors      Boolean  @default(false)
  msgCmdsErrorDeleteDelay    Int      @default(7500)
  msgCmdsShowExecutor        Boolean  @default(false)

  msgCmdsRoleOverrides    Json[]
  msgCmdsChannelOverrides Json[]

  // Infraction configurations

  requireInfractionReason Boolean @default(true)
  defaultWarningDuration  BigInt  @default(0)
  defaultMuteDuration     BigInt  @default(0)

  // Logging configurations

  infractionLogsEnabled   Boolean @default(true)
  infractionLogsChannelId String?

  // Other configurations

  moderatorRoles String[]

  // Relation: Represents the guild's infractions
  infractions Infractions[]
  // Relation: Represents the guild's messages
  messages    Messages[]
  // Relation: Represents the guild's commands (shortcuts)
  commands    Commands[]
}

model Infractions {
  // The ID of the infraction
  id          Int            @id @unique @default(autoincrement())
  // The ID of the guild the infraction was issued in
  guildId     String
  // The ID of the user the infraction was issued to
  userId      String
  // The ID of the moderator who issued the infraction
  moderatorId String
  // The type of infraction
  type        InfractionType
  // The reason for the infraction
  reason      String         @default("No reason provided.") // We default to "No reason provided." in case the reason is not provided
  // The date the infraction was issued
  createdAt   BigInt
  // The date the infraction expires (if applicable)
  expiresAt   BigInt?
  // Whether the infraction is auto-generated or not (issued by the client)
  auto        Boolean        @default(false)

  guild Guilds @relation(fields: [guildId], references: [id])
}

model Messages {
  // The ID of the message
  id          String   @id
  // The id of the author of the message
  authorId    String
  // The id of the channel the message was sent in
  channelId   String
  // The id of the guild the message was sent in
  guildId     String
  // The date the message was sent
  createdAt   DateTime
  // Whether the message has been deleted or not
  deleted     Boolean  @default(false) // We set the default to false so that we don't include it whenever we create a new message
  // The content of the message
  content     String?
  // The sticker ID of the message (if any)
  stickerId   String?
  /// ID of the message this message is replying to (if any)
  referenceId String?

  guild Guilds @relation(fields: [guildId], references: [id])
}

model Commands {
  // The ID of the command
  id          Int            @default(autoincrement())
  // The guild the command is in
  guildId     String
  // Whether the command is enabled or not
  enabled     Boolean        @default(true)
  // The name of the command
  name        String
  // The description of the command
  description String
  // The punishment of the command
  punishment  InfractionType
  // The reason for the punishment
  reason      String
  // The duration of the punishment
  duration    BigInt?
  // The amount of messages to delete upon ban
  deleteTime  Int?

  guild Guilds @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@unique([guildId, name])
}
